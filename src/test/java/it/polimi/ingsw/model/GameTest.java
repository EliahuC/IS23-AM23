package it.polimi.ingsw.model;
import it.polimi.ingsw.Launcher;
import it.polimi.ingsw.model.player.Player;
import it.polimi.ingsw.model.board.ItemTile;
import java.util.ArrayList;
import junit.framework.TestCase;

import static org.junit.jupiter.api.Assertions.*;

public class GameTest extends TestCase {
        public void testStartGameG_FIRST(){     //FIRST SIMPLE TEST, IN WHICH THE BOOLEAN PARAMETER "startedGame" IS SETTED
            // AS TRUE
            Player p1 = new Player("Tom");
            Player p2 = new Player("Jerry");
            Launcher L = new Launcher();
            L.addPlayer(p1);
            L.addPlayer(p2);
            Game G = new Game(L,L.getPlayers());
            assertTrue(G.isStartedGame());
        }
        public void testStartGameG_SECOND(){        //PLAYER IN FIRST POSITION IN L.getPlayers (after calling startGame()
            //method that mix the list changing the order of players) ACHIEVES
            Player p1 = new Player("Tom");      //THE SEAT
            Player p2 = new Player("Jerry");
            Launcher L = new Launcher();
            L.addPlayer(p1);
            L.addPlayer(p2);
            Game G = new Game(L,L.getPlayers());
            assertTrue(G.getPlayers().get(0).isFirstPlayerSeat());
        }
        public void testStartGameG_THIRD(){         //PLAYER NOT IN FIRST POSITION IN L.getPlayers (after calling startGame()
            //method that mix the list changing the order of players) NOT
            Player p1 = new Player("Tom");      //ACHIEVE THE SEAT
            Player p2 = new Player("Jerry");
            Player p3 = new Player("Spike");
            Player p4 = new Player("Butch");
            Launcher L = new Launcher();
            L.addPlayer(p1);
            L.addPlayer(p2);
            L.addPlayer(p3);
            L.addPlayer(p4);
            Game G = new Game(L,L.getPlayers());
            assertFalse(G.getPlayers().get(1).isFirstPlayerSeat());
            assertFalse(G.getPlayers().get(2).isFirstPlayerSeat());
            assertFalse(G.getPlayers().get(3).isFirstPlayerSeat());
        }
        public void testPlayMove_FIRST(){
            Player p1 = new Player("Tom");
            Player p2 = new Player("Jerry");
            Player p3 = new Player("Spike");
            Player p4 = new Player("Butch");
            Launcher L = new Launcher();
            L.addPlayer(p1);
            L.addPlayer(p2);
            L.addPlayer(p3);
            L.addPlayer(p4);
            L.setNumPlayers(4);
            Game G = new Game(L,L.getPlayers());
            ArrayList<Integer> CoordinatesTiles = new ArrayList<>();
            CoordinatesTiles.add(3);
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(8);
            ArrayList<Integer> OrderTiles = new ArrayList<>();
            OrderTiles.add(1);
            OrderTiles.add(2);
            assertTrue(G.playMove(CoordinatesTiles,3,OrderTiles));
        }
        public void testPlayMove_SECOND(){      //ONE MOVE
            Player p1 = new Player("Tom");
            Player p2 = new Player("Jerry");
            Player p3 = new Player("Spike");
            Player p4 = new Player("Butch");
            Launcher L = new Launcher();
            L.addPlayer(p1);
            L.addPlayer(p2);
            L.addPlayer(p3);
            L.addPlayer(p4);
            L.setNumPlayers(4);
            Game G = new Game(L,L.getPlayers());
            ArrayList<Integer> CoordinatesTiles = new ArrayList<>();
            CoordinatesTiles.add(3);
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(8);
            ArrayList<Integer> OrderTiles = new ArrayList<>();
            OrderTiles.add(1);
            OrderTiles.add(2);
            ItemTile i = G.getLivingRoom().getBoardTile(3,8).getTile();
            ItemTile it = G.getLivingRoom().getBoardTile(4,8).getTile();
            G.playMove(CoordinatesTiles,3,OrderTiles);
            assertEquals(i,G.getPlayers().get(0).getPlayerBookshelf().getTile(5,3));
            assertEquals(it,G.getPlayers().get(0).getPlayerBookshelf().getTile(4,3));
        }
        public void testPlayMove_THIRD(){       //ONE MOVE BUT DIFFERENT INSERT ORDER
            Player p1 = new Player("Tom");
            Player p2 = new Player("Jerry");
            Player p3 = new Player("Spike");
            Player p4 = new Player("Butch");
            Launcher L = new Launcher();
            L.addPlayer(p1);
            L.addPlayer(p2);
            L.addPlayer(p3);
            L.addPlayer(p4);
            L.setNumPlayers(4);
            Game G = new Game(L,L.getPlayers());
            ArrayList<Integer> CoordinatesTiles = new ArrayList<>();
            CoordinatesTiles.add(3);
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(8);
            ArrayList<Integer> OrderTiles = new ArrayList<>();
            OrderTiles.add(2);
            OrderTiles.add(1);
            ItemTile i = G.getLivingRoom().getBoardTile(3,8).getTile();
            ItemTile it = G.getLivingRoom().getBoardTile(4,8).getTile();
            G.playMove(CoordinatesTiles,3,OrderTiles);
            assertEquals(it,G.getPlayers().get(0).getPlayerBookshelf().getTile(5,3));
            assertEquals(i,G.getPlayers().get(0).getPlayerBookshelf().getTile(4,3));
        }
        public void testPlayMove_FOURTH(){      //TWO MOVES
            Player p1 = new Player("Tom");
            Player p2 = new Player("Jerry");
            Player p3 = new Player("Spike");
            Player p4 = new Player("Butch");
            Launcher L = new Launcher();
            L.addPlayer(p1);
            L.addPlayer(p2);
            L.addPlayer(p3);
            L.addPlayer(p4);
            L.setNumPlayers(4);
            Game G = new Game(L,L.getPlayers());
            ArrayList<Integer> CoordinatesTiles = new ArrayList<>();
            CoordinatesTiles.add(3);
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(8);
            ArrayList<Integer> OrderTiles = new ArrayList<>();
            OrderTiles.add(2);
            OrderTiles.add(1);
            ItemTile i = G.getLivingRoom().getBoardTile(3,8).getTile();
            ItemTile it = G.getLivingRoom().getBoardTile(4,8).getTile();
            G.playMove(CoordinatesTiles,3,OrderTiles);
            assertEquals(it,G.getPlayers().get(0).getPlayerBookshelf().getTile(5,3));
            assertEquals(i,G.getPlayers().get(0).getPlayerBookshelf().getTile(4,3));
            CoordinatesTiles.clear();
            OrderTiles.clear();
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(5);
            OrderTiles.add(1);
            OrderTiles.add(2);
            i = G.getLivingRoom().getBoardTile(8,4).getTile();
            it = G.getLivingRoom().getBoardTile(8,5).getTile();
            G.playMove(CoordinatesTiles,2,OrderTiles);
            assertEquals(i,G.getPlayers().get(1).getPlayerBookshelf().getTile(5,2));
            assertEquals(it,G.getPlayers().get(1).getPlayerBookshelf().getTile(4,2));
        }
        public void testPlayMove_FIFTH(){           //THREE MOVES
            Player p1 = new Player("Tom");
            Player p2 = new Player("Jerry");
            Player p3 = new Player("Spike");
            Player p4 = new Player("Butch");
            Launcher L = new Launcher();
            L.addPlayer(p1);
            L.addPlayer(p2);
            L.addPlayer(p3);
            L.addPlayer(p4);
            L.setNumPlayers(4);
            Game G = new Game(L,L.getPlayers());
            ArrayList<Integer> CoordinatesTiles = new ArrayList<>();
            CoordinatesTiles.add(3);
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(8);
            ArrayList<Integer> OrderTiles = new ArrayList<>();
            OrderTiles.add(2);
            OrderTiles.add(1);
            ItemTile i = G.getLivingRoom().getBoardTile(3,8).getTile();
            ItemTile it = G.getLivingRoom().getBoardTile(4,8).getTile();
            G.playMove(CoordinatesTiles,3,OrderTiles);
            assertEquals(it,G.getPlayers().get(0).getPlayerBookshelf().getTile(5,3));
            assertEquals(i,G.getPlayers().get(0).getPlayerBookshelf().getTile(4,3));
            CoordinatesTiles.clear();
            OrderTiles.clear();
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(5);
            OrderTiles.add(1);
            OrderTiles.add(2);
            i = G.getLivingRoom().getBoardTile(8,4).getTile();
            it = G.getLivingRoom().getBoardTile(8,5).getTile();
            G.playMove(CoordinatesTiles,2,OrderTiles);
            assertEquals(i,G.getPlayers().get(1).getPlayerBookshelf().getTile(5,2));
            assertEquals(it,G.getPlayers().get(1).getPlayerBookshelf().getTile(4,2));
            CoordinatesTiles.clear();
            OrderTiles.clear();
            CoordinatesTiles.add(0);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(0);
            CoordinatesTiles.add(3);
            OrderTiles.add(1);
            OrderTiles.add(2);
            i = G.getLivingRoom().getBoardTile(0,4).getTile();
            it = G.getLivingRoom().getBoardTile(0,3).getTile();
            G.playMove(CoordinatesTiles,1,OrderTiles);
            assertEquals(i,G.getPlayers().get(2).getPlayerBookshelf().getTile(5,1));
            assertEquals(it,G.getPlayers().get(2).getPlayerBookshelf().getTile(4,1));
        }
        public void testPlayMove_SIXTH(){           //FOUR MOVES
            Player p1 = new Player("Tom");
            Player p2 = new Player("Jerry");
            Player p3 = new Player("Spike");
            Player p4 = new Player("Butch");
            Launcher L = new Launcher();
            L.addPlayer(p1);
            L.addPlayer(p2);
            L.addPlayer(p3);
            L.addPlayer(p4);
            L.setNumPlayers(4);
            Game G = new Game(L,L.getPlayers());
            ArrayList<Integer> CoordinatesTiles = new ArrayList<>();
            CoordinatesTiles.add(3);
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(8);
            ArrayList<Integer> OrderTiles = new ArrayList<>();
            OrderTiles.add(2);
            OrderTiles.add(1);
            ItemTile i = G.getLivingRoom().getBoardTile(3,8).getTile();
            ItemTile it = G.getLivingRoom().getBoardTile(4,8).getTile();
            G.playMove(CoordinatesTiles,3,OrderTiles);
            assertEquals(it,G.getPlayers().get(0).getPlayerBookshelf().getTile(5,3));
            assertEquals(i,G.getPlayers().get(0).getPlayerBookshelf().getTile(4,3));
            CoordinatesTiles.clear();
            OrderTiles.clear();
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(5);
            OrderTiles.add(1);
            OrderTiles.add(2);
            i = G.getLivingRoom().getBoardTile(8,4).getTile();
            it = G.getLivingRoom().getBoardTile(8,5).getTile();
            G.playMove(CoordinatesTiles,2,OrderTiles);
            assertEquals(i,G.getPlayers().get(1).getPlayerBookshelf().getTile(5,2));
            assertEquals(it,G.getPlayers().get(1).getPlayerBookshelf().getTile(4,2));
            CoordinatesTiles.clear();
            OrderTiles.clear();
            CoordinatesTiles.add(0);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(0);
            CoordinatesTiles.add(3);
            OrderTiles.add(1);
            OrderTiles.add(2);
            i = G.getLivingRoom().getBoardTile(0,4).getTile();
            it = G.getLivingRoom().getBoardTile(0,3).getTile();
            G.playMove(CoordinatesTiles,1,OrderTiles);
            assertEquals(i,G.getPlayers().get(2).getPlayerBookshelf().getTile(5,1));
            assertEquals(it,G.getPlayers().get(2).getPlayerBookshelf().getTile(4,1));
            CoordinatesTiles.clear();
            OrderTiles.clear();
            CoordinatesTiles.add(3);
            CoordinatesTiles.add(7);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(7);
            CoordinatesTiles.add(5);
            CoordinatesTiles.add(7);
            OrderTiles.add(2);
            OrderTiles.add(3);
            OrderTiles.add(1);
            i = G.getLivingRoom().getBoardTile(4,7).getTile();
            it = G.getLivingRoom().getBoardTile(5,7).getTile();
            ItemTile y = G.getLivingRoom().getBoardTile(3,7).getTile();
            G.playMove(CoordinatesTiles,0,OrderTiles);
            assertEquals(i,G.getPlayers().get(3).getPlayerBookshelf().getTile(5,0));
            assertEquals(it,G.getPlayers().get(3).getPlayerBookshelf().getTile(4,0));
            assertEquals(y,G.getPlayers().get(3).getPlayerBookshelf().getTile(3,0));
        }
        public void testPlayMove_SEVENTH(){           //FIVE MOVES, THE "FIRST" PLAYER MAKES HIS/HER SECOND MOVE
            Player p1 = new Player("Tom");
            Player p2 = new Player("Jerry");
            Player p3 = new Player("Spike");
            Player p4 = new Player("Butch");
            Launcher L = new Launcher();
            L.addPlayer(p1);
            L.addPlayer(p2);
            L.addPlayer(p3);
            L.addPlayer(p4);
            L.setNumPlayers(4);
            Game G = new Game(L,L.getPlayers());
            ArrayList<Integer> CoordinatesTiles = new ArrayList<>();
            CoordinatesTiles.add(3);
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(8);
            ArrayList<Integer> OrderTiles = new ArrayList<>();
            OrderTiles.add(2);
            OrderTiles.add(1);
            ItemTile i = G.getLivingRoom().getBoardTile(3,8).getTile();
            ItemTile it = G.getLivingRoom().getBoardTile(4,8).getTile();
            G.playMove(CoordinatesTiles,3,OrderTiles);
            assertEquals(it,G.getPlayers().get(0).getPlayerBookshelf().getTile(5,3));
            assertEquals(i,G.getPlayers().get(0).getPlayerBookshelf().getTile(4,3));
            CoordinatesTiles.clear();
            OrderTiles.clear();
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(8);
            CoordinatesTiles.add(5);
            OrderTiles.add(1);
            OrderTiles.add(2);
            ItemTile j = G.getLivingRoom().getBoardTile(8,4).getTile();
            ItemTile u  = G.getLivingRoom().getBoardTile(8,5).getTile();
            G.playMove(CoordinatesTiles,2,OrderTiles);
            assertEquals(j,G.getPlayers().get(1).getPlayerBookshelf().getTile(5,2));
            assertEquals(u,G.getPlayers().get(1).getPlayerBookshelf().getTile(4,2));
            CoordinatesTiles.clear();
            OrderTiles.clear();
            CoordinatesTiles.add(0);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(0);
            CoordinatesTiles.add(3);
            OrderTiles.add(1);
            OrderTiles.add(2);
            j = G.getLivingRoom().getBoardTile(0,4).getTile();
            u = G.getLivingRoom().getBoardTile(0,3).getTile();
            G.playMove(CoordinatesTiles,1,OrderTiles);
            assertEquals(j,G.getPlayers().get(2).getPlayerBookshelf().getTile(5,1));
            assertEquals(u,G.getPlayers().get(2).getPlayerBookshelf().getTile(4,1));
            CoordinatesTiles.clear();
            OrderTiles.clear();
            CoordinatesTiles.add(3);
            CoordinatesTiles.add(7);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(7);
            CoordinatesTiles.add(5);
            CoordinatesTiles.add(7);
            OrderTiles.add(2);
            OrderTiles.add(3);
            OrderTiles.add(1);
            j = G.getLivingRoom().getBoardTile(4,7).getTile();
            u = G.getLivingRoom().getBoardTile(5,7).getTile();
            ItemTile y = G.getLivingRoom().getBoardTile(3,7).getTile();
            G.playMove(CoordinatesTiles,0,OrderTiles);
            assertEquals(j,G.getPlayers().get(3).getPlayerBookshelf().getTile(5,0));
            assertEquals(u,G.getPlayers().get(3).getPlayerBookshelf().getTile(4,0));
            assertEquals(y,G.getPlayers().get(3).getPlayerBookshelf().getTile(3,0));
            CoordinatesTiles.clear();
            OrderTiles.clear();
            CoordinatesTiles.add(5);
            CoordinatesTiles.add(0);
            CoordinatesTiles.add(4);
            CoordinatesTiles.add(0);
            OrderTiles.add(1);
            OrderTiles.add(2);
            j = G.getLivingRoom().getBoardTile(5,0).getTile();
            u = G.getLivingRoom().getBoardTile(4,0).getTile();
            G.playMove(CoordinatesTiles,4,OrderTiles);
            assertEquals(it,G.getPlayers().get(0).getPlayerBookshelf().getTile(5,3));
            assertEquals(i,G.getPlayers().get(0).getPlayerBookshelf().getTile(4,3));
            assertEquals(j,G.getPlayers().get(0).getPlayerBookshelf().getTile(5,4));
            assertEquals(u,G.getPlayers().get(0).getPlayerBookshelf().getTile(4,4));
        }
}